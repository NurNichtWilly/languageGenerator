#this script generates a new language and provides a translator for it.
#the translator is a dictionary that maps a word in the new language to a word in the old language.
#the language is procedurally generated by translating the old language into the new language.

#this script is a work in progress


import random
import string
import sys
import os
import time
import math
import re
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.patches as patches
import matplotlib.path as path
import matplotlib.text as text
import matplotlib.ticker as ticker
import matplotlib.lines as lines
import matplotlib.collections as collections
import matplotlib.cm as cm
import matplotlib.colors as colors
import matplotlib.gridspec as gridspec
import matplotlib.image as image
import matplotlib.patches as patches
import matplotlib.pyplot as plt
import matplotlib.axis as axis
import matplotlib.axes as axes
import matplotlib.figure as figure
import matplotlib.ticker as ticker


#load the language mapping from a file
def loadLanguageMapping(fileName):
    languageMap = {}
    #check if the file exists and is readable
    #if the file does not exist, create it
    if not os.path.isfile(fileName):
        file = open(fileName, "w")
        file.close()

    #open the file
    file = open(fileName, "r")
    #for each line in the file
    for line in file:
        #split the line into words
        words = line.split()
        #add the word to the language map
        languageMap[words[0]] = words[1]
    #close the file
    file.close()
    #return the language map
    return languageMap

#save the language mapping to a file
def saveLanguageMapping(languageMap, fileName):
    #open the file
    file = open(fileName, "w")
    #for each word in the language mapping
    for word in languageMap:
        #write the word and its translation to the file
        file.write(word + " " + languageMap[word] + "\n")
    #close the file
    file.close()

#this funtions generates a new word for the word in the old language
#and returns the new word
def newWordGenerator(languageMap, wordInOldLanguage):
    #get the length of the word in the old language
    length = len(wordInOldLanguage)
    #initialize the new word
    newWord = ""
    #for each letter in the word in the old language
    for i in range(length):
        #get a random letter
        letter = random.choice(string.ascii_lowercase)
        #add the letter to the new word
        newWord += letter
    #return the new word
    return newWord






#this function takes a sentence and returns the sentence in the new language
#if a word in the sentence is not in the language mapping, it is generated by the new word generator
def translate(sentence, languageMap):
    #split the sentence into words
    words = sentence.split()
    #for each word in the sentence
    for word in words:
        #if the word is not in the language mapping
        if word not in languageMap:
            #generate a new word
            newWord = newWordGenerator(languageMap, word)
            #add the new word to the language mapping
            languageMap[word] = newWord
        #print the word
        print(languageMap[word])
    #return the sentence in the new language
    return sentence

#this is the main function
def main():
    #get the language mapping
    languageMap = loadLanguageMapping("languageMapping.txt")
    #get the sentence
    sentence = input("Enter a sentence: ")
    #translate the sentence
    translatedSentence = translate(sentence, languageMap)
    #print the translated sentence
    print(translatedSentence)
    #save the language mapping
    saveLanguageMapping(languageMap, "languageMapping.txt")

#call the main function
if __name__ == "__main__":

    main()